AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Network and Security Groups for Project 1 - Outline of Resources
# This should be all the basic sections needed in Project #1
Resources:
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC


  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC

  PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: us-east-1a
        CidrBlock: 10.0.3.0/24
        VpcId: !Ref VPC

  PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: us-east-1b
        CidrBlock: 10.0.4.0/24
        VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  !Ref VPC


  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref PublicRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client hosts
      VpcId: !Ref VPC
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 10.0.0.0/16
  
  WebInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client hosts
      VpcId: !Ref VPC
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        DestinationSecurityGroupId: !Ref ALBSecurityGroup 

      
      


  # Optional BastionSercurityGroup if you build a Bastion Host

Outputs:
# This is an example of the complete YAML code for outputting the VPC information and also exporting the VPC ID for use
# by another template
  VPC:
    Description: VPC
    Value:
      Ref: VPC
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VPC"
  PrivateSubnet1:
    Description: Private Subnet 1
    Value:
      Ref: PrivateSubnet1
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet1"

  PrivateSubnet2:
    Description: Private Subnet 2
    Value:
      Ref: PrivateSubnet2
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet2"

  PublicSubnet1:
    Description: Public Subnet 1
    Value:
      Ref: PublicSubnet1
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet1"

  PublicSubnet2:
    Description: Public Subnet 2
    Value:
      Ref: PublicSubnet2
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet2"

  WebInstanceSecurityGroup:
    Description: Web Instance Security Group
    Value:
      Ref: WebInstanceSecurityGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-WebInstanceSecurityGroup"

  ALBSecurityGroup:
    Description: Application Load Balancer Security Group
    Value:
      Ref: ALBSecurityGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ALBSecurityGroup"
